# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# --------------------------------------------------------------------------

import os

from azure.identity import DefaultAzureCredential
from azure.mgmt.sql import SqlManagementClient
from azure.mgmt.storage import StorageManagementClient
from azure.mgmt.resource import ResourceManagementClient


def main():

    SUBSCRIPTION_ID = os.environ.get("SUBSCRIPTION_ID", None)
    PASSWORD = os.environ.get("PASSWORD", None)
    GROUP_NAME = "testgroupx"
    VULNERABILITY_ASSESSMENT = "vulnerabilityassessmentxxyyzz"
    SECURITY_ALERT_POLICY_NAME = "securityalertpolicy"
    SERVER = "serverxxy"
    ACCOUNT = "accountxxy"
    CONTAINER = "containerxxy"

    # Create client
    # # For other authentication approaches, please see: https://pypi.org/project/azure-identity/
    resource_client = ResourceManagementClient(
        credential=DefaultAzureCredential(),
        subscription_id=SUBSCRIPTION_ID
    )
    sql_client = SqlManagementClient(
        credential=DefaultAzureCredential(),
        subscription_id=SUBSCRIPTION_ID
    )
    # - init depended client -
    storage_client = StorageManagementClient(
        credential=DefaultAzureCredential(),
        subscription_id=SUBSCRIPTION_ID
    )
    # - end -

    # Create resource group
    resource_client.resource_groups.create_or_update(
        GROUP_NAME,
        {"location": "eastus"}
    )

    # - init depended resources -
    # Create storage account
    storageaccount = storage_client.storage_accounts.begin_create(
        GROUP_NAME,
        ACCOUNT,
        {
          "sku": {
            "name": "Standard_GRS"
          },
          "kind": "StorageV2",
          "location": "eastus",
          "encryption": {
            "services": {
              "file": {
                "key_type": "Account",
                "enabled": True
              },
              "blob": {
                "key_type": "Account",
                "enabled": True
              }
            },
            "key_source": "Microsoft.Storage"
          },
          "tags": {
            "key1": "value1",
            "key2": "value2"
          }
        }
    ).result()
    print(f"Create storage account:\n{storageaccount}")

    # Create blob container
    container = storage_client.blob_containers.create(
        GROUP_NAME,
        ACCOUNT,
        CONTAINER,
        {}
    )
    print(f"Create blob container:\n{container}")

    # Regenerate storage account key
    key = storage_client.storage_accounts.regenerate_key(
        GROUP_NAME,
        ACCOUNT,
        {
          "key_name": "key2"
        }
    )
    ACCESS_KEY = key.keys[0].value
    print(f"Generate key:\n{key}")

    # Create Server
    server = sql_client.servers.begin_create_or_update(
        GROUP_NAME,
        SERVER,
        {
          "location": "eastus",
          "administrator_login": "dummylogin",
          "administrator_login_password": PASSWORD
        }
    ).result()
    print(f"Create server:\n{server}")

    # Create server security alert policy
    policy = sql_client.server_security_alert_policies.begin_create_or_update(
        GROUP_NAME,
        SERVER,
        SECURITY_ALERT_POLICY_NAME,
        {
          "state": "Enabled",
          "email_account_admins": True,
          "disabled_alerts": [],
          "email_addresses": []
        }
    ).result()
    print(f"Create server security alert policy:\n{policy}")
    # - end -

    # Create vulnerability assessment
    vulnerability_assessment = sql_client.server_vulnerability_assessments.create_or_update(
        GROUP_NAME,
        SERVER,
        VULNERABILITY_ASSESSMENT,
        {
            "storage_container_path": f"https://{ACCOUNT}.blob.core.windows.net/{CONTAINER}/",
            "storage_account_access_key": ACCESS_KEY,
        },
    )

    print(f"Create vulnerability assessment:\n{vulnerability_assessment}")

    # Get vulnerability assessment
    vulnerability_assessment = sql_client.server_vulnerability_assessments.get(
        GROUP_NAME,
        SERVER,
        VULNERABILITY_ASSESSMENT
    )
    print(f"Get vulnerability assessment:\n{vulnerability_assessment}")

    # Delete vulnerability assessment
    vulnerability_assessment = sql_client.server_vulnerability_assessments.delete(
        GROUP_NAME,
        SERVER,
        VULNERABILITY_ASSESSMENT
    )
    print("Delete vulnerability assessment.\n")

    # Delete Group
    resource_client.resource_groups.begin_delete(
        GROUP_NAME
    ).result()


if __name__ == "__main__":
    main()
